/*
Deployment script for Haikus

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Haikus"
:setvar DefaultFilePrefix "Haikus"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key c21846b2-d828-45e8-9cd0-cc5e19b417d1 is skipped, element [dbo].[FK_Rating_Haikus] (SqlForeignKeyConstraint) will not be renamed to [FK_Haikus_Users]';


GO
PRINT N'Rename refactoring operation with key 131af19f-a1b8-4eca-9697-ca1f1507f30a is skipped, element [dbo].[Haikus].[IsDeleted] (SqlSimpleColumn) will not be renamed to Date';


GO
PRINT N'Rename refactoring operation with key 5fc07b31-641d-4c7d-8518-a64c4a998649, 1c08e22f-452b-4338-aee4-0c2e93621f58 is skipped, element [dbo].[Haikus].[IscCmplaint] (SqlSimpleColumn) will not be renamed to IsComplaint';


GO
PRINT N'Rename refactoring operation with key 9bbf5d50-6178-4b91-a6d5-8c2ccf3eeb32, b8f7e1bc-ece3-48af-a2b6-6139a6086865 is skipped, element [dbo].[Haikus].[Rating] (SqlSimpleColumn) will not be renamed to RatingValue';


GO
PRINT N'Rename refactoring operation with key 0240748d-afeb-483c-9aa2-8f2dd4c7590c is skipped, element [dbo].[Users].[ActualRating] (SqlSimpleColumn) will not be renamed to RatingValue';


GO
PRINT N'Rename refactoring operation with key 24b3b2de-56ff-4fba-ac8c-0d732b8643fa is skipped, element [dbo].[Users].[RatingCount] (SqlSimpleColumn) will not be renamed to RatersCount';


GO
PRINT N'Creating [dbo].[ComplaintForHaikus]...';


GO
CREATE TABLE [dbo].[ComplaintForHaikus] (
    [Id]      INT      IDENTITY (1, 1) NOT NULL,
    [HaikuId] BIGINT   NOT NULL,
    [Date]    DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Haikus]...';


GO
CREATE TABLE [dbo].[Haikus] (
    [Id]          BIGINT         IDENTITY (1, 1) NOT NULL,
    [Text]        NVARCHAR (MAX) NOT NULL,
    [UserId]      BIGINT         NOT NULL,
    [Date]        DATETIME       NOT NULL,
    [IsDeleted]   BIT            NOT NULL,
    [RatingValue] BIGINT         NOT NULL,
    [RatersCount] BIGINT         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Rating]...';


GO
CREATE TABLE [dbo].[Rating] (
    [Id]        BIGINT IDENTITY (1, 1) NOT NULL,
    [Value]     INT    NOT NULL,
    [HaikuId]   BIGINT NOT NULL,
    [UserId]    BIGINT NOT NULL,
    [IsDeleted] BIT    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SaltForUser]...';


GO
CREATE TABLE [dbo].[SaltForUser] (
    [Id]     INT            IDENTITY (1, 1) NOT NULL,
    [Salt]   NVARCHAR (500) NOT NULL,
    [UserId] BIGINT         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SaltForUser].[IX_SaltForUser_UserId]...';


GO
CREATE NONCLUSTERED INDEX [IX_SaltForUser_UserId]
    ON [dbo].[SaltForUser]([UserId] ASC);


GO
PRINT N'Creating [dbo].[Users]...';


GO
CREATE TABLE [dbo].[Users] (
    [Id]          BIGINT         IDENTITY (1, 1) NOT NULL,
    [Username]    NVARCHAR (50)  NOT NULL,
    [PublishCode] NVARCHAR (MAX) NOT NULL,
    [IsDeleted]   BIT            NOT NULL,
    [IsVIP]       BIT            NOT NULL,
    [RatingValue] BIGINT         NOT NULL,
    [RatersCount] BIGINT         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[ComplaintForHaikus]...';


GO
ALTER TABLE [dbo].[ComplaintForHaikus]
    ADD DEFAULT GETDATE() FOR [Date];


GO
PRINT N'Creating unnamed constraint on [dbo].[Haikus]...';


GO
ALTER TABLE [dbo].[Haikus]
    ADD DEFAULT 0 FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[Haikus]...';


GO
ALTER TABLE [dbo].[Haikus]
    ADD DEFAULT 0 FOR [RatingValue];


GO
PRINT N'Creating unnamed constraint on [dbo].[Haikus]...';


GO
ALTER TABLE [dbo].[Haikus]
    ADD DEFAULT 0 FOR [RatersCount];


GO
PRINT N'Creating unnamed constraint on [dbo].[Rating]...';


GO
ALTER TABLE [dbo].[Rating]
    ADD DEFAULT 0 FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [IsDeleted];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [IsVIP];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [RatingValue];


GO
PRINT N'Creating unnamed constraint on [dbo].[Users]...';


GO
ALTER TABLE [dbo].[Users]
    ADD DEFAULT 0 FOR [RatersCount];


GO
PRINT N'Creating [dbo].[FK_Haikus_Users]...';


GO
ALTER TABLE [dbo].[Haikus] WITH NOCHECK
    ADD CONSTRAINT [FK_Haikus_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Ratings_Haikus]...';


GO
ALTER TABLE [dbo].[Rating] WITH NOCHECK
    ADD CONSTRAINT [FK_Ratings_Haikus] FOREIGN KEY ([HaikuId]) REFERENCES [dbo].[Haikus] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Ratings_Users]...';


GO
ALTER TABLE [dbo].[Rating] WITH NOCHECK
    ADD CONSTRAINT [FK_Ratings_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Haikus] ([Id]);


GO
PRINT N'Creating [dbo].[FK_SaltForUser_Users]...';


GO
ALTER TABLE [dbo].[SaltForUser] WITH NOCHECK
    ADD CONSTRAINT [FK_SaltForUser_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[Users] ([Id]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c21846b2-d828-45e8-9cd0-cc5e19b417d1')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c21846b2-d828-45e8-9cd0-cc5e19b417d1')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '131af19f-a1b8-4eca-9697-ca1f1507f30a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('131af19f-a1b8-4eca-9697-ca1f1507f30a')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '5fc07b31-641d-4c7d-8518-a64c4a998649')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('5fc07b31-641d-4c7d-8518-a64c4a998649')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '1c08e22f-452b-4338-aee4-0c2e93621f58')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('1c08e22f-452b-4338-aee4-0c2e93621f58')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '9bbf5d50-6178-4b91-a6d5-8c2ccf3eeb32')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('9bbf5d50-6178-4b91-a6d5-8c2ccf3eeb32')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '0240748d-afeb-483c-9aa2-8f2dd4c7590c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('0240748d-afeb-483c-9aa2-8f2dd4c7590c')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'b8f7e1bc-ece3-48af-a2b6-6139a6086865')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('b8f7e1bc-ece3-48af-a2b6-6139a6086865')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '24b3b2de-56ff-4fba-ac8c-0d732b8643fa')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('24b3b2de-56ff-4fba-ac8c-0d732b8643fa')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [dbo].[Users] ([Username], [PublishCode]) VALUES ('FirstUser', 'some publish code');
DECLARE @UserId BIGINT = SCOPE_IDENTITY();
INSERT INTO [dbo].[Haikus] ([Text], [UserId]) VALUES ('some dummy dummy haiku 1', @UserId);
INSERT INTO [dbo].[Haikus] ([Text], [UserId]) VALUES ('some dummy dummy haiku 2', @UserId);
INSERT INTO [dbo].[Haikus] ([Text], [UserId]) VALUES ('some dummy dummy haiku 3', @UserId);
INSERT INTO [dbo].[Haikus] ([Text], [UserId]) VALUES ('some dummy dummy haiku 4', @UserId);
INSERT INTO [dbo].[Haikus] ([Text], [UserId]) VALUES ('some dummy dummy haiku 5', @UserId);
INSERT INTO [dbo].[Haikus] ([Text], [UserId]) VALUES ('some dummy dummy haiku 6', @UserId);



GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Haikus] WITH CHECK CHECK CONSTRAINT [FK_Haikus_Users];

ALTER TABLE [dbo].[Rating] WITH CHECK CHECK CONSTRAINT [FK_Ratings_Haikus];

ALTER TABLE [dbo].[Rating] WITH CHECK CHECK CONSTRAINT [FK_Ratings_Users];

ALTER TABLE [dbo].[SaltForUser] WITH CHECK CHECK CONSTRAINT [FK_SaltForUser_Users];


GO
PRINT N'Update complete.';


GO
